/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_caps {
            timeout-ms = <50>;
            key-positions = <37 39>;
            bindings = <&kp CAPS>;
        };
    };
};

&led_strip { chain-length = <11>; };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            //
            // ------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |||||  Y  |  U  |  I  |  O  |  P  |   BKSP    |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |||||  H  |  J  |  K  |  L  |  ;  |    ''     |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |||||  N  |  M  |  ,  |  .  |  /  | SHFT(RET) |
            //                         | NUM | GUI | SPC | LWR | RSE |
            //

            bindings = <
&mt TILDE TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp BSPC  &kp LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp SEMI  &kp SQT  &kp LCTRL  &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH
            >;
        };

        lower_layer {
            //
            // -------------------------------------------------------------------------------
            // | ESC  |  !  |  @  |  #  |  $  |  %  ||||||  ^  |  &  |  *  |  =  |  \  | DEL |
            // | CTRL |  {  |  (  |  )  |  }  |  ~  ||||||  ←  |  ↓  |  ↑  |  →  |  :  |  `  |
            // | SHFT |     |  [  |  ]  |     |     ||||||  +  |  -  |  _  |     |     |     |
            //                        |     | GUI | trans | trans |     |
            //

            bindings = <
&kp ESC  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp ASTRK  &kp EQUAL  &kp BSLH  &trans  &trans  &kp LBRC  &kp LPAR  &kp RPAR  &kp RBRC  &kp TILDE  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp COLON  &kp GRAVE  &trans  &none  &kp LBKT  &kp RBKT  &none  &none  &kp PLUS  &kp MINUS  &kp UNDER  &none  &none
            >;
        };

        raise_layer {
            //
            // -------------------------------------------------------------------------------
            // | LY0 |  1  |  2  |  3  |  4  |  5  |||||  6  |  7  |  8  |  9  |  0  |  DEL  |
            // |     |     |     |     |     |     |||||     |     |     |     |     |       |
            // |BTCLR| BOOT|     |     |     |     |||||     |     |     |     |     |       |
            //                        |     |     |     |     |     |
            //

            bindings = <
&to 0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &bt BT_CLR  &bootloader  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        num_layer {
            //
            // ---------------------------------------------------------------------------------
            // | LY0 |  F1  |     |     |     |     |||||||     |  7  |  8  |  9  |     | BKSP |
            // |     | VOL+ |     |     |     |     |||||||     |  4  |  5  |  6  |     |      |
            // |     | VOL- |     |     |     |     |||||||     |  1  |  2  |  3  |     |      |
            //                         |     |     |       |  0  |  .  |
            //

            bindings = <
&kp TILDE  &kp F1  &kp UP_ARROW  &none  &none  &none  &none  &kp N7  &kp N8  &kp N9  &none  &trans  &kp C_VOL_UP  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none  &none  &none  &kp N4  &kp N5  &kp N6  &none  &none  &kp C_VOL_DN  &trans  &none  &none  &none  &none  &none  &kp N1  &kp N2  &kp N3  &none
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &rgb_ug RGB_TOG  &trans  &trans  &trans  &trans  &trans  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &rgb_ug RGB_BRD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &trans  &trans  &trans
            >;
        };
    };
};
